import os
import re
import shutil
from pathlib import Path

class FolderCleanup:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.certificates_dir = self.base_dir / "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    
    def clean_program_name(self, name):
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç –º—É—Å–æ—Ä–∞"""
        if not name:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        name = re.sub(r'["\u201C\u201D¬´¬ª()_]', '', name)
        name = re.sub(r'\s+', ' ', name)
        name = name.strip()
        
        # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã "–≤ –æ–±—ä—ë–º–µ", "–≤ –æ–±—ä–µ–º–µ" –∏ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –Ω–∏—Ö
        name = re.sub(r'\s*[–≤–í]\s*–æ–±—ä[–µ—ë]–º–µ.*$', '', name)
        name = re.sub(r'\s*\d+\s*—á–∞—Å.*$', '', name)
        name = re.sub(r'\s*–æ–±—å—ë–º–µ.*$', '', name)
        name = re.sub(r'\s*–æ–±—ä—ë–º—Å.*$', '', name)
        name = re.sub(r'\s*–æ–±—ä—ë–Ω–µ.*$', '', name)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏ OCR
        replacements = [
            (r'^[0(]\s*', '–û '),  # "0 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π" -> "–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π"
            (r'–∫–æ–ø—Ç—Ä–∞–∫—Ç–Ω–æ–π', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π'),
            (r'—Å–∏—Å—Ç–µ–º[—Å–µ]', '—Å–∏—Å—Ç–µ–º–µ'),
            (r'–∑–∞–∫—É–ø–æ–∫[—ä—ç]', '–∑–∞–∫—É–ø–æ–∫'),
            (r'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω[–∞-—è]*', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ'),
            (r'–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω[–∞-—è]*', '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ'),
            (r'–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω[–∞-—è]*', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π'),
            (r'44-–§[–ó3]', '44-–§–ó'),
            (r'–ø—Ä–∞–∫—Ç–∏–∫–∞[–∞-—è]*', '–ø—Ä–∞–∫—Ç–∏–∫–∞'),
            (r'—Ç–µ–æ—Ä–∏—è\s+–∏\s+–ø—Ä–∞–∫—Ç–∏–∫–∞[–∞-—è]*', '—Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞'),
        ]
        
        for pattern, replacement in replacements:
            name = re.sub(pattern, replacement, name, flags=re.IGNORECASE)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        name = re.sub(r'\s+', ' ', name)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        name = re.sub(r'[\*\#\{\}\[\]\$\%\@\!\+\=\<\>]+.*$', '', name)
        
        return name.strip()
    
    def get_standard_program_name(self, dirty_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        cleaned = self.clean_program_name(dirty_name).lower()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
        if '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ' in cleaned and '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ' in cleaned and '–∑–∞–∫—É–ø–∫–∏' in cleaned:
            if '44-—Ñ–∑' in cleaned or '—Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞' in cleaned:
                return "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏ (44-–§–ó) - —Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞"
        
        if '–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ' in cleaned and '—Å—Ñ–µ—Ä–µ –∑–∞–∫—É–ø–æ–∫' in cleaned:
            return "–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤ —Å—Ñ–µ—Ä–µ –∑–∞–∫—É–ø–æ–∫"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ
        return self.clean_program_name(dirty_name)
    
    def rename_folders(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        if not self.certificates_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        program_folders = [d for d in self.certificates_dir.iterdir() 
                          if d.is_dir() and d.name != "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ"]
        
        if not program_folders:
            print("üìÅ –ü–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(program_folders)} –ø–∞–ø–æ–∫ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏:")
        print("=" * 60)
        
        renamed_count = 0
        
        for folder in program_folders:
            old_name = folder.name
            new_name = self.get_standard_program_name(old_name)
            
            print(f"\nüìÇ –ü–∞–ø–∫–∞: '{old_name}'")
            
            if old_name == new_name:
                print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                continue
            
            print(f"   üîÑ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{new_name}'")
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            safe_new_name = re.sub(r'[<>:"/\\|?*]', '_', new_name)
            new_path = self.certificates_dir / safe_new_name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            if new_path.exists() and new_path != folder:
                print(f"   ‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{safe_new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
                files_moved = 0
                for file in folder.glob("*.pdf"):
                    target_file = new_path / file.name
                    if not target_file.exists():
                        shutil.move(file, target_file)
                        files_moved += 1
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        counter = 1
                        while True:
                            name_part = file.stem
                            ext_part = file.suffix
                            new_file_name = f"{name_part}_{counter}{ext_part}"
                            target_file = new_path / new_file_name
                            if not target_file.exists():
                                shutil.move(file, target_file)
                                files_moved += 1
                                break
                            counter += 1
                
                print(f"   üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {files_moved} —Ñ–∞–π–ª–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É")
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É
                try:
                    folder.rmdir()
                    print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞")
                    renamed_count += 1
                except OSError:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø—É—Å—Ç–∞—è)")
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                try:
                    folder.rename(new_path)
                    print(f"   ‚úÖ –ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞")
                    renamed_count += 1
                except OSError as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        
        print(f"\nüéâ –ò–¢–û–ì–û:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {renamed_count}")
        print(f"   üìÅ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(program_folders)}")
    
    def show_current_folders(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        if not self.certificates_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        program_folders = [d for d in self.certificates_dir.iterdir() 
                          if d.is_dir() and d.name != "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ"]
        
        if not program_folders:
            print("üìÅ –ü–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üìÅ –¢–µ–∫—É—â–∏–µ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ ({len(program_folders)}):")
        print("=" * 60)
        
        for i, folder in enumerate(program_folders, 1):
            file_count = len(list(folder.glob("*.pdf")))
            print(f"{i:2}. {folder.name} ({file_count} —Ñ–∞–π–ª–æ–≤)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            new_name = self.get_standard_program_name(folder.name)
            if new_name != folder.name:
                print(f"    üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è: '{new_name}'")

def main():
    cleanup = FolderCleanup()
    
    while True:
        print("\n" + "="*60)
        print("           –û–ß–ò–°–¢–ö–ê –ù–ê–ó–í–ê–ù–ò–ô –ü–ê–ü–û–ö –° –ü–†–û–ì–†–ê–ú–ú–ê–ú–ò")
        print("="*60)
        print("1Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞–ø–∫–∏")
        print("2Ô∏è‚É£  –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏")
        print("3Ô∏è‚É£  –í—ã—Ö–æ–¥")
        print("-"*60)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()
        
        if choice == "1":
            cleanup.show_current_folders()
        elif choice == "2":
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏!")
            cleanup.rename_folders()
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        input("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()