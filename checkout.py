#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
"""

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    print("üß™ –¢–ï–°–¢ –£–°–¢–ê–ù–û–í–ö–ò –ë–ò–ë–õ–ò–û–¢–ï–ö")
    print("=" * 40)
    
    tests = [
        ("pandas", "import pandas as pd"),
        ("numpy", "import numpy as np"),
        ("opencv-python", "import cv2"),
        ("Pillow", "from PIL import Image"),
        ("requests", "import requests"),
        ("easyocr", "import easyocr"),
        ("pdf2image", "from pdf2image import convert_from_path"),
        ("torch", "import torch"),
        ("pathlib", "from pathlib import Path"),
        ("re", "import re"),
        ("json", "import json"),
        ("time", "import time"),
        ("datetime", "from datetime import datetime"),
        ("collections", "from collections import Counter"),
        ("difflib", "from difflib import SequenceMatcher"),
    ]
    
    success_count = 0
    
    for name, import_code in tests:
        try:
            exec(import_code)
            print(f"‚úÖ {name}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  {name}: {e}")
    
    print("\n" + "=" * 40)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(tests)} –±–∏–±–ª–∏–æ—Ç–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if success_count == len(tests):
        print("üéâ –í–°–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –ù–µ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    return True

def test_poppler():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Poppler"""
    print("\nüîç –¢–ï–°–¢ POPPLER")
    print("=" * 40)
    
    try:
        from pdf2image import convert_from_path
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å dummy –≤—ã–∑–æ–≤ (–æ–Ω —É–ø–∞–¥–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        print("‚úÖ pdf2image –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ poppler –≤ PATH
        import subprocess
        import os
        
        try:
            result = subprocess.run(['pdftoppm', '-h'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0 or 'pdftoppm' in result.stderr:
                print("‚úÖ Poppler –Ω–∞–π–¥–µ–Ω –≤ PATH")
                return True
            else:
                print("‚ùå Poppler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
                return False
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå Poppler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –≤ PATH")
            return False
            
    except ImportError:
        print("‚ùå pdf2image –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def test_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
    print("\nüöÄ –¢–ï–°–¢ GPU")
    print("=" * 40)
    
    try:
        import torch
        
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)
            print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {gpu_name}")
            print(f"üìä –í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory // 1024**3} GB")
            return True
        else:
            print("‚ö†Ô∏è  CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            print("üí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CUDA: https://pytorch.org/get-started/locally/")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
        return False

def test_easyocr():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç EasyOCR"""
    print("\nüëÅÔ∏è  –¢–ï–°–¢ EASYOCR")
    print("=" * 40)
    
    try:
        import easyocr
        print("‚úÖ EasyOCR –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å reader (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR...")
        reader = easyocr.Reader(['ru'], gpu=False, verbose=False)
        print("‚úÖ EasyOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ EasyOCR: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    print("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    print("=" * 50)
    
    all_good = True
    
    # –¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
    if not test_imports():
        all_good = False
    
    # –¢–µ—Å—Ç Poppler
    if not test_poppler():
        all_good = False
        print("\nüí° –ö–ê–ö –£–°–¢–ê–ù–û–í–ò–¢–¨ POPPLER:")
        print("1. –°–∫–∞—á–∞–π—Ç–µ: https://github.com/oschwartz10612/poppler-windows/releases/latest")
        print("2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ C:\\poppler\\")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH: C:\\poppler\\Library\\bin")
        print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É")
    
    # –¢–µ—Å—Ç GPU (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    test_gpu()
    
    # –¢–µ—Å—Ç EasyOCR (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
    print("\n‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ...")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    test_easyocr()
    
    print("\n" + "=" * 50)
    if all_good:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("‚úÖ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main()