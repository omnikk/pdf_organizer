import os
import sys
import subprocess
import requests
import zipfile
from pathlib import Path
import json

def check_admin():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        return os.getuid() == 0
    except AttributeError:
        import ctypes
        return ctypes.windll.shell32.IsUserAnAdmin() != 0

def install_with_winget():
    """–ü—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ winget"""
    print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ winget...")
    
    try:
        result = subprocess.run(['winget', 'install', '--id=poppler.poppler'], 
                              capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ Poppler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ winget!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ winget: {result.stderr}")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå winget –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def download_poppler():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Poppler –≤—Ä—É—á–Ω—É—é"""
    print("üîÑ –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Poppler...")
    
    # URL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
    api_url = "https://api.github.com/repos/oschwartz10612/poppler-windows/releases/latest"
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...")
        response = requests.get(api_url, timeout=30)
        response.raise_for_status()
        
        release_data = response.json()
        
        # –ò—â–µ–º ZIP —Ñ–∞–π–ª
        download_url = None
        for asset in release_data['assets']:
            if asset['name'].endswith('.zip') and 'Release' in asset['name']:
                download_url = asset['browser_download_url']
                filename = asset['name']
                break
        
        if not download_url:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return False
        
        print(f"üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {filename}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º
        response = requests.get(download_url, timeout=300)
        response.raise_for_status()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = Path.home() / "Downloads"
        zip_path = temp_dir / filename
        
        with open(zip_path, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {zip_path}")
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        poppler_dir = Path("C:/poppler")
        
        print(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ {poppler_dir}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞)
        try:
            poppler_dir.mkdir(parents=True, exist_ok=True)
        except PermissionError:
            print("‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ C:/")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
            return False
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(poppler_dir)
        
        print("‚úÖ Poppler —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω")
        
        # –£–¥–∞–ª—è–µ–º ZIP
        zip_path.unlink()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

def add_to_path():
    """–î–æ–±–∞–≤–ª—è–µ—Ç Poppler –≤ PATH"""
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ PATH...")
    
    poppler_bin = Path("C:/poppler/Library/bin")
    
    if not poppler_bin.exists():
        # –ò—â–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è bin
        possible_paths = [
            Path("C:/poppler/bin"),
            Path("C:/poppler/Library/bin"),
        ]
        
        # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        for root in Path("C:/poppler").rglob("*"):
            if root.name == "bin" and (root / "pdftoppm.exe").exists():
                poppler_bin = root
                break
        
        if not poppler_bin.exists():
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω bin/pdftoppm.exe")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ C:/poppler/")
            return False
    
    poppler_bin_str = str(poppler_bin)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ PATH
    current_path = os.environ.get('PATH', '')
    if poppler_bin_str in current_path:
        print("‚úÖ Poppler —É–∂–µ –≤ PATH")
        return True
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        os.environ['PATH'] = poppler_bin_str + os.pathsep + current_path
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–¥–º–∏–Ω –ø—Ä–∞–≤)
        if sys.platform == "win32":
            import winreg
            
            try:
                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, "Environment", 0, winreg.KEY_ALL_ACCESS) as key:
                    current_user_path = winreg.QueryValueEx(key, "PATH")[0]
                    if poppler_bin_str not in current_user_path:
                        new_path = poppler_bin_str + os.pathsep + current_user_path
                        winreg.SetValueEx(key, "PATH", 0, winreg.REG_EXPAND_SZ, new_path)
                        print("‚úÖ Poppler –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    else:
                        print("‚úÖ Poppler —É–∂–µ –≤ PATH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ PATH –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PATH: {e}")
        return False

def test_poppler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É Poppler"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Poppler...")
    
    try:
        result = subprocess.run(['pdftoppm', '-h'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 or 'pdftoppm' in result.stderr:
            print("‚úÖ Poppler —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå Poppler –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
            
    except FileNotFoundError:
        print("‚ùå pdftoppm –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –£–°–¢–ê–ù–û–í–©–ò–ö POPPLER")
    print("=" * 50)
    
    # –°–ø–æ—Å–æ–± 1: winget
    if install_with_winget():
        if test_poppler():
            print("\nüéâ POPPLER –£–°–¢–ê–ù–û–í–õ–ï–ù –£–°–ü–ï–®–ù–û!")
            return
    
    # –°–ø–æ—Å–æ–± 2: —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    print("\nüì¶ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ...")
    
    if download_poppler():
        if add_to_path():
            if test_poppler():
                print("\nüéâ POPPLER –£–°–¢–ê–ù–û–í–õ–ï–ù –£–°–ü–ï–®–ù–û!")
                print("‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell/CMD –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è PATH")
                return
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    print("\n‚ùå –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")
    print("\nüí° –†–£–ß–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê:")
    print("1. –°–∫–∞—á–∞–π—Ç–µ: https://github.com/oschwartz10612/poppler-windows/releases/latest")
    print("2. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª Release-xx.xx.x-0.zip")
    print("3. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ C:\\poppler\\")
    print("4. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH: C:\\poppler\\Library\\bin")
    print("5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell")

if __name__ == "__main__":
    main()