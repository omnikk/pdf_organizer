"""
GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ –ª–æ–≥–∞–º–∏
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import subprocess
import sys
import time
import os
import json
from pathlib import Path
from datetime import datetime
import queue

class CertificateProcessorGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # –°—Ç–∏–ª—å
        self.setup_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.base_dir = Path.cwd()
        self.is_processing = False
        self.current_process = None
        self.log_queue = queue.Queue()
        
        # –î–∞–Ω–Ω—ã–µ –æ —Å–∫—Ä–∏–ø—Ç–∞—Ö
        self.scripts = {
            '1': {
                'name': '1.new2.py',
                'title': '–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
                'description': '–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ PDF —Ñ–∞–π–ª–æ–≤\n–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –ø–∞–ø–∫–∞–º —Å –ø–æ–º–æ—â—å—é OCR',
                'icon': 'üìÑ',
                'color': '#4CAF50'
            },
            '2': {
                'name': '2.folder_cleanup.py', 
                'title': '–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫',
                'description': '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç\n–Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏',
                'icon': 'üóÇÔ∏è',
                'color': '#2196F3'
            },
            '3': {
                'name': '3.sunder.py',
                'title': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–∞–ø–æ–∫',
                'description': '–ù–∞—Ö–æ–¥–∏—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–∞–ø–∫–∏\n—Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏',
                'icon': 'üîó',
                'color': '#FF9800'
            },
            '4': {
                'name': '4.FIO.py',
                'title': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–ò–û –≤ —Ñ–∞–π–ª–∞—Ö',
                'description': '–ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å –§–ò–û\n–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É',
                'icon': 'üë§',
                'color': '#9C27B0'
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.check_system_ready()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ª–æ–≥–æ–≤
        self.process_log_queue()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°—Ç–∏–ª—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–Ω–æ–ø–æ–∫
        style.configure('Large.TButton', font=('Arial', 11, 'bold'))
        style.configure('Action.TButton', font=('Arial', 12, 'bold'))
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        style.configure('Custom.Horizontal.TProgressbar', 
                       troughcolor='#E0E0E0', 
                       background='#4CAF50')
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        title_label = tk.Label(title_frame, 
                              text="üéì –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤", 
                              font=('Arial', 18, 'bold'),
                              fg='#1976D2')
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame, 
                                 text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å OCR –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π",
                                 font=('Arial', 10),
                                 fg='#666666')
        subtitle_label.pack()
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        left_frame = ttk.LabelFrame(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="10")
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        quick_frame = ttk.LabelFrame(left_frame, text="–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", padding="5")
        quick_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.full_process_btn = tk.Button(quick_frame, 
                                         text="üöÄ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê",
                                         font=('Arial', 12, 'bold'),
                                         bg='#4CAF50', fg='white',
                                         height=2,
                                         command=self.run_full_process)
        self.full_process_btn.pack(fill=tk.X, pady=2)
        
        self.check_system_btn = tk.Button(quick_frame,
                                         text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
                                         font=('Arial', 10),
                                         bg='#2196F3', fg='white',
                                         command=self.check_system_detailed)
        self.check_system_btn.pack(fill=tk.X, pady=2)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
        stages_frame = ttk.LabelFrame(left_frame, text="–û—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã", padding="5")
        stages_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.stage_buttons = {}
        for script_id, script_info in self.scripts.items():
            btn_frame = tk.Frame(stages_frame)
            btn_frame.pack(fill=tk.X, pady=2)
            
            btn = tk.Button(btn_frame,
                           text=f"{script_info['icon']} {script_info['title']}",
                           font=('Arial', 9, 'bold'),
                           bg=script_info['color'], fg='white',
                           height=2,
                           command=lambda sid=script_id: self.run_single_script(sid))
            btn.pack(fill=tk.X)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = tk.Label(btn_frame, 
                                 text=script_info['description'],
                                 font=('Arial', 8),
                                 fg='#666666',
                                 justify=tk.LEFT)
            desc_label.pack(fill=tk.X)
            
            self.stage_buttons[script_id] = btn
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(left_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="5")
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.auto_scroll_var = tk.BooleanVar(value=True)
        auto_scroll_cb = ttk.Checkbutton(settings_frame, 
                                        text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–æ–≤",
                                        variable=self.auto_scroll_var)
        auto_scroll_cb.pack(anchor=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        control_frame = ttk.LabelFrame(left_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º", padding="5")
        control_frame.pack(fill=tk.X)
        
        self.stop_btn = tk.Button(control_frame,
                                 text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                 font=('Arial', 10, 'bold'),
                                 bg='#F44336', fg='white',
                                 state=tk.DISABLED,
                                 command=self.stop_process)
        self.stop_btn.pack(fill=tk.X, pady=2)
        
        self.clear_logs_btn = tk.Button(control_frame,
                                       text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
                                       font=('Arial', 9),
                                       bg='#757575', fg='white',
                                       command=self.clear_logs)
        self.clear_logs_btn.pack(fill=tk.X, pady=2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        right_frame = ttk.LabelFrame(main_frame, text="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", padding="10")
        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        right_frame.columnconfigure(0, weight=1)
        right_frame.rowconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        status_frame = ttk.Frame(right_frame)
        status_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(1, weight=1)
        
        tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:", font=('Arial', 10, 'bold')).grid(row=0, column=0, sticky=tk.W)
        self.status_label = tk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                    font=('Arial', 10), fg='#4CAF50')
        self.status_label.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        tk.Label(status_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å:", font=('Arial', 10, 'bold')).grid(row=1, column=0, sticky=tk.W)
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate', style='Custom.Horizontal.TProgressbar')
        self.progress.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=(5, 0))
        
        # –õ–æ–≥–∏
        logs_frame = ttk.LabelFrame(right_frame, text="–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding="5")
        logs_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        logs_frame.columnconfigure(0, weight=1)
        logs_frame.rowconfigure(0, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(logs_frame, 
                                                 height=20, 
                                                 font=('Consolas', 9),
                                                 wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –¢—ç–≥–∏ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ –ª–æ–≥–æ–≤
        self.log_text.tag_configure("success", foreground="#4CAF50", font=('Consolas', 9, 'bold'))
        self.log_text.tag_configure("error", foreground="#F44336", font=('Consolas', 9, 'bold'))
        self.log_text.tag_configure("warning", foreground="#FF9800", font=('Consolas', 9, 'bold'))
        self.log_text.tag_configure("info", foreground="#2196F3", font=('Consolas', 9, 'bold'))
        self.log_text.tag_configure("header", foreground="#9C27B0", font=('Consolas', 10, 'bold'))
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        bottom_frame = ttk.Frame(main_frame)
        bottom_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.stats_label = tk.Label(bottom_frame, 
                                   text="üìÅ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
                                   font=('Arial', 9),
                                   fg='#666666')
        self.stats_label.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        self.select_folder_btn = tk.Button(bottom_frame,
                                          text="üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                                          font=('Arial', 9),
                                          command=self.select_base_folder)
        self.select_folder_btn.pack(side=tk.RIGHT)
    
    def log_message(self, message, tag="normal"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_queue.put((f"[{timestamp}] {message}", tag))
    
    def process_log_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤"""
        try:
            while True:
                message, tag = self.log_queue.get_nowait()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
                self.log_text.insert(tk.END, message + "\n", tag)
                
                # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                if self.auto_scroll_var.get():
                    self.log_text.see(tk.END)
                
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, self.process_log_queue)
    
    def update_status(self, status, color="#4CAF50"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        self.status_label.config(text=status, fg=color)
    
    def check_system_ready(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            input_dir = self.base_dir / "input"
            if input_dir.exists():
                pdf_count = len(list(input_dir.glob("*.pdf")))
                if pdf_count > 0:
                    self.stats_label.config(text=f"üìÅ –ù–∞–π–¥–µ–Ω–æ {pdf_count} PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input")
                else:
                    self.stats_label.config(text="‚ö†Ô∏è –í –ø–∞–ø–∫–µ input –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤")
            else:
                self.stats_label.config(text="‚ùå –ü–∞–ø–∫–∞ input –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            self.stats_label.config(text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def check_system_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.log_message("üîç –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...", "header")
        
        def check_thread():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
                self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤...")
                missing_scripts = []
                for script_info in self.scripts.values():
                    script_path = self.base_dir / script_info['name']
                    if script_path.exists():
                        self.log_message(f"‚úÖ {script_info['name']}", "success")
                    else:
                        self.log_message(f"‚ùå {script_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
                        missing_scripts.append(script_info['name'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
                self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...")
                input_dir = self.base_dir / "input"
                if input_dir.exists():
                    pdf_files = list(input_dir.glob("*.pdf"))
                    self.log_message(f"‚úÖ –ü–∞–ø–∫–∞ input –Ω–∞–π–¥–µ–Ω–∞ ({len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤)", "success")
                else:
                    self.log_message("‚ùå –ü–∞–ø–∫–∞ input –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
                self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫...")
                required_libs = ['pandas', 'easyocr', 'pdf2image', 'cv2', 'numpy']
                for lib in required_libs:
                    try:
                        if lib == 'cv2':
                            import cv2
                        else:
                            __import__(lib)
                        self.log_message(f"‚úÖ {lib}", "success")
                    except ImportError:
                        self.log_message(f"‚ùå {lib} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "error")
                
                if not missing_scripts:
                    self.log_message("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "success")
                else:
                    self.log_message("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã", "warning")
                    
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", "error")
        
        threading.Thread(target=check_thread, daemon=True).start()
    
    def select_base_folder(self):
        """–í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.base_dir = Path(folder)
            self.log_message(f"üìÇ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: {folder}", "info")
            self.check_system_ready()
    
    def disable_buttons(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.full_process_btn.config(state=tk.DISABLED)
        self.check_system_btn.config(state=tk.DISABLED)
        for btn in self.stage_buttons.values():
            btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
    
    def enable_buttons(self):
        """–í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.full_process_btn.config(state=tk.NORMAL)
        self.check_system_btn.config(state=tk.NORMAL)
        for btn in self.stage_buttons.values():
            btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
    
    def run_script_process(self, script_name, description):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        script_path = self.base_dir / script_name
        
        if not script_path.exists():
            self.log_message(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
            return False
        
        self.log_message(f"üöÄ –ó–∞–ø—É—Å–∫: {description}", "header")
        self.log_message(f"üìÑ –°–∫—Ä–∏–ø—Ç: {script_name}", "info")
        self.log_message("=" * 60)
        
        try:
            self.current_process = subprocess.Popen(
                [sys.executable, str(script_path)],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                cwd=self.base_dir,
                bufsize=1,
                universal_newlines=True
            )
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            while True:
                output = self.current_process.stdout.readline()
                if output == '' and self.current_process.poll() is not None:
                    break
                if output:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    line = output.strip()
                    if "‚úÖ" in line or "—É—Å–ø–µ—à–Ω–æ" in line.lower():
                        tag = "success"
                    elif "‚ùå" in line or "–æ—à–∏–±–∫–∞" in line.lower():
                        tag = "error"
                    elif "‚ö†Ô∏è" in line or "–≤–Ω–∏–º–∞–Ω–∏–µ" in line.lower():
                        tag = "warning"
                    elif "üéâ" in line or "–∑–∞–≤–µ—Ä—à–µ–Ω" in line.lower():
                        tag = "success"
                    else:
                        tag = "normal"
                    
                    self.log_message(line, tag)
            
            return_code = self.current_process.wait()
            
            if return_code == 0:
                self.log_message("üéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
                return True
            else:
                self.log_message(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {return_code})", "error")
                return False
                
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "error")
            return False
    
    def run_single_script(self, script_id):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        if self.is_processing:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!")
            return
        
        script_info = self.scripts[script_id]
        
        def run_thread():
            self.is_processing = True
            self.disable_buttons()
            self.progress.start()
            self.update_status(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {script_info['title']}", "#FF9800")
            
            try:
                success = self.run_script_process(script_info['name'], script_info['title'])
                
                if success:
                    self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "#4CAF50")
                else:
                    self.update_status("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "#F44336")
                    
            finally:
                self.is_processing = False
                self.progress.stop()
                self.enable_buttons()
                self.current_process = None
        
        threading.Thread(target=run_thread, daemon=True).start()
    
    def run_full_process(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_processing:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!")
            return
        
        result = messagebox.askyesno(
            "–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤?\n\n"
            "–ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —ç—Ç–∞–ø—ã:\n"
            "1. –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF (OCR)\n"
            "2. –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫\n"
            "3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–∞–ø–æ–∫\n"
            "4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–ò–û –≤ —Ñ–∞–π–ª–∞—Ö\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è."
        )
        
        if not result:
            return
        
        def run_thread():
            self.is_processing = True
            self.disable_buttons()
            self.progress.start()
            self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...", "#FF9800")
            
            start_time = time.time()
            successful_stages = 0
            
            self.log_message("üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í", "header")
            self.log_message("=" * 60)
            
            try:
                for i, (script_id, script_info) in enumerate(self.scripts.items(), 1):
                    self.log_message(f"üìã –≠–¢–ê–ü {i}/4: {script_info['title']}", "header")
                    
                    success = self.run_script_process(script_info['name'], script_info['title'])
                    
                    if success:
                        successful_stages += 1
                        self.log_message(f"‚úÖ –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", "success")
                    else:
                        self.log_message(f"‚ùå –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π", "error")
                        if i == 1:  # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –Ω–µ —É–¥–∞–ª—Å—è
                            self.log_message("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –Ω–µ —É–¥–∞–ª—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.", "warning")
                    
                    self.log_message("-" * 40)
                    time.sleep(1)
                
                total_time = time.time() - start_time
                
                self.log_message("üèÜ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê", "header")
                self.log_message(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç", "info")
                self.log_message(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {successful_stages}/4", "success")
                
                if successful_stages == 4:
                    self.log_message("üéâ –í–°–ï –≠–¢–ê–ü–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!", "success")
                    self.log_message("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'", "info")
                    self.update_status("–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "#4CAF50")
                else:
                    self.log_message(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏", "warning")
                    self.update_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏", "#FF9800")
                    
            except Exception as e:
                self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", "error")
                self.update_status("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "#F44336")
            finally:
                self.is_processing = False
                self.progress.stop()
                self.enable_buttons()
                self.current_process = None
        
        threading.Thread(target=run_thread, daemon=True).start()
    
    def stop_process(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.current_process and self.is_processing:
            try:
                self.current_process.terminate()
                self.log_message("‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning")
                self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "#FF9800")
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "error")
            finally:
                self.is_processing = False
                self.progress.stop()
                self.enable_buttons()
                self.current_process = None
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "info")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.log_message("üéì –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "header")
            self.log_message("üìÅ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: " + str(self.base_dir), "info")
            self.log_message("‚ú® –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", "success")
            
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        except Exception as e:
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_processing:
            result = messagebox.askyesno(
                "–í—ã—Ö–æ–¥", 
                "–°–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.\n"
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤—ã–π—Ç–∏?"
            )
            if result:
                self.stop_process()
                self.root.destroy()
        else:
            self.root.destroy()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = CertificateProcessorGUI()
        app.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()