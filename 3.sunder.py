#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –ø–∞–ø–æ–∫ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.
"""

import os
import re
import shutil
from pathlib import Path
from difflib import SequenceMatcher

class FolderMerger:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.certificates_dir = self.base_dir / "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
        
    def get_similarity(self, a, b):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ (0-1)"""
        return SequenceMatcher(None, a.lower(), b.lower()).ratio()
    
    def extract_keywords(self, folder_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = re.findall(r'\b\w+\b', folder_name.lower())
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        keywords = set()
        
        if any(word in words for word in ['–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è', '–∫–æ–ø—Ç—Ä–∞–∫—Ç–Ω–æ–π']):
            keywords.add('–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞')
        
        if any(word in words for word in ['–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤']):
            keywords.add('–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ_–∑–∞–∫—É–ø–∫–∏')
        
        if any(word in words for word in ['–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ', '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω', '–º—É–Ω–∏—Ü–∏']):
            keywords.add('–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ_–∑–∞–∫—É–ø–∫–∏')
        
        if any(word in words for word in ['44', '—Ñ–∑', '44-—Ñ–∑']):
            keywords.add('44_—Ñ–∑')
        
        if any(word in words for word in ['—Ç–µ–æ—Ä–∏—è', '–ø—Ä–∞–∫—Ç–∏–∫–∞']):
            keywords.add('—Ç–µ–æ—Ä–∏—è_–ø—Ä–∞–∫—Ç–∏–∫–∞')
        
        return keywords
    
    def group_similar_folders(self, folders):
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏"""
        groups = []
        processed = set()
        
        for i, folder1 in enumerate(folders):
            if i in processed:
                continue
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            current_group = [folder1]
            processed.add(i)
            
            keywords1 = self.extract_keywords(folder1.name)
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏
            for j, folder2 in enumerate(folders):
                if j in processed or i == j:
                    continue
                
                keywords2 = self.extract_keywords(folder2.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if keywords1 and keywords2 and len(keywords1 & keywords2) >= 1:
                    current_group.append(folder2)
                    processed.add(j)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                similarity = self.get_similarity(folder1.name, folder2.name)
                if similarity > 0.6:  # 60% —Å—Ö–æ–¥—Å—Ç–≤–∞
                    current_group.append(folder2)
                    processed.add(j)
            
            groups.append(current_group)
        
        return groups
    
    def suggest_group_names(self, group):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–∞–ø–æ–∫"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
        all_keywords = set()
        for folder in group:
            keywords = self.extract_keywords(folder.name)
            all_keywords.update(keywords)
        
        suggestions = []
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ_–∑–∞–∫—É–ø–∫–∏' in all_keywords and '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ_–∑–∞–∫—É–ø–∫–∏' in all_keywords:
            if '44_—Ñ–∑' in all_keywords:
                if '—Ç–µ–æ—Ä–∏—è_–ø—Ä–∞–∫—Ç–∏–∫–∞' in all_keywords:
                    suggestions.append("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏ (44-–§–ó) - —Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞")
                else:
                    suggestions.append("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏ (44-–§–ó)")
            else:
                suggestions.append("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏")
        
        elif '–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞' in all_keywords:
            suggestions.append("–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤ —Å—Ñ–µ—Ä–µ –∑–∞–∫—É–ø–æ–∫")
            suggestions.append("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Å—Ñ–µ—Ä–µ –∑–∞–∫—É–ø–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç
        longest_name = max(group, key=lambda f: len(f.name)).name
        if longest_name not in suggestions:
            suggestions.append(longest_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        shortest_name = min(group, key=lambda f: len(f.name)).name
        if shortest_name not in suggestions and len(shortest_name) > 10:
            suggestions.append(shortest_name)
        
        return suggestions
    
    def show_group_info(self, group, group_number):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–∞–ø–æ–∫"""
        print(f"\nüìÅ –ì–†–£–ü–ü–ê {group_number}:")
        print("=" * 50)
        
        total_files = 0
        for i, folder in enumerate(group, 1):
            file_count = len(list(folder.glob("*.pdf")))
            total_files += file_count
            print(f"  {i}. {folder.name} ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        print(f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {total_files}")
        print(f"üìÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {len(group)}")
        
        return total_files
    
    def choose_group_name(self, group, group_number):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        suggestions = self.suggest_group_names(group)
        
        print(f"\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"  {i}. {suggestion}")
        
        print(f"  {len(suggestions) + 1}. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        print(f"  {len(suggestions) + 2}. –ù–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number} (1-{len(suggestions) + 2}): ").strip()
                
                if choice == str(len(suggestions) + 2):
                    return None  # –ù–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å
                
                elif choice == str(len(suggestions) + 1):
                    custom_name = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ").strip()
                    if custom_name:
                        return custom_name
                    else:
                        print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                        continue
                
                else:
                    choice_idx = int(choice) - 1
                    if 0 <= choice_idx < len(suggestions):
                        return suggestions[choice_idx]
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(suggestions) + 2}")
                        continue
                        
            except ValueError:
                print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(suggestions) + 2}")
                continue
    
    def merge_folders(self, group, new_name):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–∞–ø–∫–∏ –≥—Ä—É–ø–ø—ã –≤ –æ–¥–Ω—É —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        safe_name = re.sub(r'[<>:"/\\|?*]', '_', new_name)
        target_folder = self.certificates_dir / safe_name
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
        target_folder.mkdir(exist_ok=True)
        
        total_moved = 0
        
        for folder in group:
            if folder.name == safe_name:
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
                
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
            for pdf_file in folder.glob("*.pdf"):
                target_file = target_folder / pdf_file.name
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                counter = 1
                while target_file.exists():
                    name_part = pdf_file.stem
                    ext_part = pdf_file.suffix
                    target_file = target_folder / f"{name_part}_{counter}{ext_part}"
                    counter += 1
                
                shutil.move(pdf_file, target_file)
                total_moved += 1
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É
            try:
                folder.rmdir()
                print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder.name}")
            except OSError:
                print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É: {folder.name} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø—É—Å—Ç–∞—è)")
        
        print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {total_moved} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É: {safe_name}")
        return total_moved
    
    def process_folder_merging(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–∞–ø–æ–∫"""
        if not self.certificates_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ (–∫—Ä–æ–º–µ "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ")
        program_folders = [d for d in self.certificates_dir.iterdir() 
                          if d.is_dir() and d.name != "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ"]
        
        if len(program_folders) < 2:
            print("üìÅ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è!")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(program_folders)} –ø–∞–ø–æ–∫ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏
        groups = self.group_similar_folders(program_folders)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –±–æ–ª—å—à–µ 1 –ø–∞–ø–∫–∏)
        groups_to_merge = [group for group in groups if len(group) > 1]
        
        if not groups_to_merge:
            print("üéâ –í—Å–µ –ø–∞–ø–∫–∏ —É–∂–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
            return
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(groups_to_merge)} –≥—Ä—É–ø–ø –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
        merging_plan = []
        
        for i, group in enumerate(groups_to_merge, 1):
            total_files = self.show_group_info(group, i)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            chosen_name = self.choose_group_name(group, i)
            
            if chosen_name:
                merging_plan.append((group, chosen_name))
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {i} –±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ –≤: '{chosen_name}'")
            else:
                print(f"‚è≠Ô∏è  –ì—Ä—É–ø–ø–∞ {i} –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        
        if not merging_plan:
            print("\nü§∑ –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(merging_plan)} –≥—Ä—É–ø–ø –ø–∞–ø–æ–∫!")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if confirm not in ['–¥–∞', 'yes', 'y', '–¥']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        
        total_merged_files = 0
        for group, new_name in merging_plan:
            print(f"\nüìÅ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤: '{new_name}'")
            moved_files = self.merge_folders(group, new_name)
            total_merged_files += moved_files
        
        print(f"\nüéâ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìÅ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≥—Ä—É–ø–ø: {len(merging_plan)}")
        print(f"üìÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_merged_files}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.show_final_state()
    
    def show_final_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–ø–æ–∫"""
        program_folders = [d for d in self.certificates_dir.iterdir() 
                          if d.is_dir() and d.name != "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ"]
        
        print(f"\nüìÇ –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ({len(program_folders)} –ø–∞–ø–æ–∫):")
        print("=" * 60)
        
        for i, folder in enumerate(program_folders, 1):
            file_count = len(list(folder.glob("*.pdf")))
            print(f"{i:2}. {folder.name} ({file_count} —Ñ–∞–π–ª–æ–≤)")

def main():
    merger = FolderMerger()
    
    print("üîó –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ü–û–•–û–ñ–ò–• –ü–ê–ü–û–ö")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏.")
    print("–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.\n")
    
    merger.process_folder_merging()

if __name__ == "__main__":
    main()